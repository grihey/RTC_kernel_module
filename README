REVIEW
This is a demo kernel module which demontrates my skills  in creating KLM.
Module intented to emulating rtc device. Time represent in epoch unix
seconds.

Parameters of module is:
@param epoch_time_sec - unix seconds, initializing when module loaded by
                        current kernel time.
@param epoch_time_usec- useconds from timeval struct.
@param speed          - speed of time flow in module. Values of speed begins 
                        at 100, it means 100 - normal flow, like system 
                        clock, if speed greater - time flow in that module
                        accelerated, if lesser slowing down.
@param random         - if non-zero, current time ascending by increment
                        makes from @random-bound param, interprets like  
                        range of possible values of speed.
@param random-bound   - range of possible values of speed in random time mode

Module could be inserted and removed from kernel space dinamically. 
Module registers in file /dev/rtc38 and when you read it secs, usecs of module
time flow outputed.
Module have interface with userspace in /proc/rtcmodule. You may passing
parameters by string commands:
"s [value]" - sets speed to value; value must be non-negative
"r [value]" - sets random mode if value is non-zero, disable random mode
              otherwise.
"b [value]" - sets range distribution of speed for random mode.
"t [value]" - sets epoch time secs in module.
"u [value]" - sets epoch time usecs in module.

Or reading from that file. outputed:
  Module uptime.
  Difference between sys clock. Negative means rtc module time ahead sys time.
  Speed.
  Random. 1 means on, 0 off.
  Random bound.
  Secs.
  Usecs.
